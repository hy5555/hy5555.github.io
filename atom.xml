<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yellow One</title>
  
  
  <link href="https://github.com/hy5555/hy5555.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/hy5555/hy5555.github.io.git/"/>
  <updated>2025-03-02T07:22:45.482Z</updated>
  <id>https://github.com/hy5555/hy5555.github.io.git/</id>
  
  <author>
    <name>Yellow One</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue+Vite项目编写插件更改打包产物结构</title>
    <link href="https://github.com/hy5555/hy5555.github.io.git/2025/03/02/Vue+Vite%E9%A1%B9%E7%9B%AE%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6%E6%9B%B4%E6%94%B9%E6%89%93%E5%8C%85%E4%BA%A7%E7%89%A9%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/hy5555/hy5555.github.io.git/2025/03/02/Vue+Vite%E9%A1%B9%E7%9B%AE%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6%E6%9B%B4%E6%94%B9%E6%89%93%E5%8C%85%E4%BA%A7%E7%89%A9%E7%BB%93%E6%9E%84/</id>
    <published>2025-03-02T07:21:38.012Z</published>
    <updated>2025-03-02T07:22:45.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>在公司项目中，使用到了微前端，主应用和子应用部署在两台机器上，所以主应用打包后的产物里面的配置文件中的转发域名，在不同的环境里面是不同的，客户更新环境时，希望只替换资源文件，而不替换配置文件。那么主应用中的打包产物结构就应该变换一下，将资源文件放在一个目录（web），将配置文件放在一个目录（conf），提供给客户的包应该去掉conf这个目录。</strong></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>编写一个插件，改变打包产物目录结构，接下来我将写一个demo，将除index.html文件的其他资源文件放入web目录下。</strong></p><p><strong>首先确定思路</strong></p><p><strong>1、将资源文件放进web目录下</strong></p><p><strong>2、修改index.html文件中的引用路径</strong></p><p><strong>3、将public静态资源的文件移到web目录下面</strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><strong>安装</strong>Cheerio库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i cheerio</span><br></pre></td></tr></table></figure><ul><li><strong>在根目录下新建plugin目录</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">import &#123; readFileSync &#125; from &#x27;fs&#x27;</span><br><span class="line">import path from &#x27;path&#x27;</span><br><span class="line">import &#123; createRequire &#125; from &#x27;module&#x27;</span><br><span class="line">import fs from &#x27;fs&#x27;</span><br><span class="line">const require = createRequire(import.meta.url)</span><br><span class="line">const cheerio = require(&#x27;cheerio&#x27;)</span><br><span class="line">export default function customOutputDir(options = &#123;&#125;) &#123;</span><br><span class="line">  const dirName = options.dirName || &#x27;web&#x27;</span><br><span class="line">  let outputPath = &#x27;&#x27;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: &#x27;custom-output-dir&#x27;,</span><br><span class="line">    enforce: &#x27;post&#x27;,</span><br><span class="line">    configResolved(config) &#123;</span><br><span class="line">      outputPath = path.resolve(config.root, config.build.outDir)</span><br><span class="line">    &#125;,</span><br><span class="line">    generateBundle(outputOptions, bundle) &#123;</span><br><span class="line">      const htmlEntries = []</span><br><span class="line">      // 处理所有构建文件</span><br><span class="line">      for (const [filename, assetInfo] of Object.entries(bundle)) &#123;</span><br><span class="line">        if (filename === &#x27;index.html&#x27;) &#123;</span><br><span class="line">          htmlEntries.push(assetInfo)</span><br><span class="line">          continue</span><br><span class="line">        &#125;</span><br><span class="line">        // 修改文件路径并标准化路径</span><br><span class="line">        const newFileName = path.join(dirName, filename).replace(/\\/g, &#x27;/&#x27;)</span><br><span class="line">        assetInfo.fileName = newFileName</span><br><span class="line">      &#125;</span><br><span class="line">      // 处理HTML中的资源引用</span><br><span class="line">      htmlEntries.forEach(assetInfo =&gt; &#123;</span><br><span class="line">        const $ = cheerio.load(assetInfo.source)</span><br><span class="line">      </span><br><span class="line">        // 处理所有资源引用</span><br><span class="line">        $(&#x27;script[src], link[href], img[src], source[src]&#x27;).each((_, el) =&gt; &#123;</span><br><span class="line">          const attributes = el.attribs</span><br><span class="line">          const attr = &#x27;src&#x27; in attributes ? &#x27;src&#x27; : &#x27;href&#x27;</span><br><span class="line">          const originalPath = attributes[attr]</span><br><span class="line">          if (!originalPath || /^(https?:|data:)/.test(originalPath)) return</span><br><span class="line">          // 标准化路径处理</span><br><span class="line">          let normalizedPath = originalPath</span><br><span class="line">            .replace(/^\/+/, &#x27;&#x27;)         // 去除开头的斜杠</span><br><span class="line">            .replace(/^\.\/+/, &#x27;&#x27;)       // 去除开头的./ </span><br><span class="line">            .replace(/\/+/g, &#x27;/&#x27;)        // 合并多个斜杠</span><br><span class="line">          // 构建新路径</span><br><span class="line">          const newPath = path.posix.join(dirName, normalizedPath)</span><br><span class="line">          </span><br><span class="line">          // 处理绝对路径和相对路径</span><br><span class="line">          if (originalPath.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class="line">            attributes[attr] = `/$&#123;newPath&#125;`</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            attributes[attr] = `./$&#123;newPath&#125;` // 始终使用相对路径</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        assetInfo.source = $.html()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 处理public目录文件</span><br><span class="line">    async writeBundle() &#123;</span><br><span class="line">      const movePublicFiles = (dir) =&gt; &#123;</span><br><span class="line">        const files = fs.readdirSync(dir)</span><br><span class="line">      </span><br><span class="line">        files.forEach(file =&gt; &#123;</span><br><span class="line">          const fullPath = path.join(dir, file)</span><br><span class="line">          const stats = fs.statSync(fullPath)</span><br><span class="line">          if (stats.isDirectory() &amp;&amp; file !== &#x27;web&#x27;) &#123;</span><br><span class="line">            movePublicFiles(fullPath)</span><br><span class="line">          &#125; else if (!stats.isDirectory() &amp;&amp; file !== &#x27;index.html&#x27;) &#123;</span><br><span class="line">            const relativePath = path.relative(outputPath, dir)</span><br><span class="line">            const destDir = path.join(</span><br><span class="line">              outputPath,</span><br><span class="line">              dirName,</span><br><span class="line">              relativePath === &#x27;.&#x27; ? &#x27;&#x27; : relativePath</span><br><span class="line">            )</span><br><span class="line">          </span><br><span class="line">            fs.mkdirSync(destDir, &#123; recursive: true &#125;)</span><br><span class="line">            fs.renameSync(fullPath, path.join(destDir, file))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      movePublicFiles(outputPath)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>在vite.config.ts中引入插件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//更改打包产物目录结构</span><br><span class="line">import customOutputDir from &#x27;./plugin/custom-output-dir&#x27;</span><br></pre></td></tr></table></figure><ul><li><strong>在plugins配置中添加以下内容</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//更改打包产物目录结构</span><br><span class="line">import customOutputDir from &#x27;./plugin/custom-output-dir&#x27;</span><br><span class="line"></span><br><span class="line">export default defineConfig((&#123; command, mode &#125;) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      customOutputDir(&#123;</span><br><span class="line">        dirName: &#x27;web&#x27; // 可自定义目录名称</span><br><span class="line">      &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>打包</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm build</span><br></pre></td></tr></table></figure><ul><li><strong>打包产物结构</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dist/</span><br><span class="line">├─ index.html         # 保留在根目录</span><br><span class="line">└─ web/              # 新增子目录</span><br><span class="line">   ├─ assets/</span><br><span class="line">   │  └─ main.1234.js</span><br><span class="line">   └─ images/</span><br><span class="line">      └─ logo.png</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><strong>除了背景里面我说的场景，更改打包产物结构，还适用于多环境构建，不同环境构建到不同子目录（根据nginx配置来设置不同环境的打包名称）。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在公司项目中，使用到了微前端，主应用和子应用部署在两台机器上，所以主应用打包后的产物里面的配置文件中的转发域名，在不同的环境</summary>
      
    
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    <category term="Vite" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/Vue/Vite/"/>
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/Vue/"/>
    
    <category term="Vite" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>Vue3+Vite的环境配置</title>
    <link href="https://github.com/hy5555/hy5555.github.io.git/2025/02/23/VSCode%E4%B8%AD%E5%86%99Vue3%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D/"/>
    <id>https://github.com/hy5555/hy5555.github.io.git/2025/02/23/VSCode%E4%B8%AD%E5%86%99Vue3%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D/</id>
    <published>2025-02-23T14:53:04.732Z</published>
    <updated>2025-02-23T15:04:56.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3项目路径别名配置终极指南（VSCode-Vite-TypeScript）"><a href="#Vue3项目路径别名配置终极指南（VSCode-Vite-TypeScript）" class="headerlink" title="Vue3项目路径别名配置终极指南（VSCode + Vite + TypeScript）"></a>Vue3项目路径别名配置终极指南（VSCode + Vite + TypeScript）</h1><h2 id="一、核心配置四部曲"><a href="#一、核心配置四部曲" class="headerlink" title="一、核心配置四部曲"></a>一、核心配置四部曲</h2><h3 id="1-VSCode智能提示支持"><a href="#1-VSCode智能提示支持" class="headerlink" title="1. VSCode智能提示支持"></a>1. VSCode智能提示支持</h3><p> <strong>插件安装</strong> **：  **</p><ul><li><strong>Path Intellisense（路径自动补全）</strong></li><li><strong>Volar（Vue3语法支持）</strong><br><strong>设置映射关系</strong> <strong>（.vscode/settings.json）：</strong></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;path-intellisense.mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/src&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typescript.preferences.importModuleSpecifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;non-relative&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-Vite工程配置（vite-config-ts）"><a href="#2-Vite工程配置（vite-config-ts）" class="headerlink" title="2. Vite工程配置（vite.config.ts）"></a>2. Vite工程配置（vite.config.ts）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="comment">// 扩展示例</span></span><br><span class="line">      <span class="string">&#x27;@components&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/components&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-TypeScript配置（tsconfig-json）"><a href="#3-TypeScript配置（tsconfig-json）" class="headerlink" title="3. TypeScript配置（tsconfig.json）"></a>3. TypeScript配置（tsconfig.json）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@components/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/components/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vite/client&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-类型声明文件（src-vite-env-d-ts）"><a href="#4-类型声明文件（src-vite-env-d-ts）" class="headerlink" title="4. 类型声明文件（src/vite-env.d.ts）"></a>4. 类型声明文件（src/vite-env.d.ts）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决Vue文件导入报红</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 支持别名路径类型识别</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@/*&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、关键注意事项"><a href="#二、关键注意事项" class="headerlink" title="二、关键注意事项"></a>二、关键注意事项</h2><ol><li><strong>依赖安装</strong><br>必须安装类型声明包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>路径验证方法</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在任意文件测试</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@components/Button.vue&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>路径解析流程图解</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VSCode智能提示 → Path Intellisense → tsconfig路径映射 → Vite实际解析</span><br></pre></td></tr></table></figure><h2 id="三、高级优化方案"><a href="#三、高级优化方案" class="headerlink" title="三、高级优化方案"></a>三、高级优化方案</h2><h3 id="1-智能提示增强"><a href="#1-智能提示增强" class="headerlink" title="1. 智能提示增强"></a>1. 智能提示增强</h3><p><strong>创建全局类型声明（types/global.d.ts）：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@/*&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-多环境配置示例"><a href="#2-多环境配置示例" class="headerlink" title="2. 多环境配置示例"></a>2. 多环境配置示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createAlias</span> = (<span class="params"><span class="attr">dir</span>: <span class="built_in">string</span></span>) =&gt; path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: <span class="title function_">createAlias</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;@core&#x27;</span>: <span class="title function_">createAlias</span>(<span class="string">&#x27;src/core&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;@test&#x27;</span>: <span class="title function_">createAlias</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3项目路径别名配置终极指南（VSCode-Vite-TypeScript）&quot;&gt;&lt;a href=&quot;#Vue3项目路径别名配置终极指南（VSCode-Vite-TypeScript）&quot; class=&quot;headerlink&quot; title=&quot;Vue3项目路径别名配置</summary>
      
    
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="配置" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="VSCode" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/%E9%85%8D%E7%BD%AE/VSCode/"/>
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="配置" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="VSCode" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Vue3+Vite的环境配置</title>
    <link href="https://github.com/hy5555/hy5555.github.io.git/2025/02/20/Vue3+Vite%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/hy5555/hy5555.github.io.git/2025/02/20/Vue3+Vite%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2025-02-20T14:59:51.428Z</published>
    <updated>2025-02-20T15:06:42.800Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>Vite的import.meta.env可以全局使用，其中默认具有一些属性(MODE,DEV,PROD,SSR,BASE_YRL),如果你需要扩展更多的环境变量，可以使用.env文件来丰富。</p><h4 id="2、做什么"><a href="#2、做什么" class="headerlink" title="2、做什么"></a>2、做什么</h4><p>env中有一些常用配置：<br>    MODE，用来指明现在所处于的模式，一般通过它进行不同环境的区分，比如 dev、test、pre、prd 等等，默认为：“development”<br>    BASE_URL，用来请求静态资源初始的 url<br>    PROD，用来判断当前环境是否是正式环境<br>    DEV，用来与 PROD 相反的环境<br>    SSR，用来判断是否是服务端渲染的环境</p><pre><code>可以根据这些配置，来区分不同模式下的差异</code></pre><h4 id="3、如何做"><a href="#3、如何做" class="headerlink" title="3、如何做"></a>3、如何做</h4><p>1、在项目根目录下新建.env文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#必须使用<span class="variable constant_">VITE</span>开头的配置信息，否则无法生效</span><br><span class="line"><span class="variable constant_">VITE_APP_ENV</span> = <span class="string">&#x27;prod&#x27;</span></span><br><span class="line">#自动获取地址推荐</span><br><span class="line"><span class="variable constant_">VITE_APP_BASE_URL</span> = <span class="string">&#x27;&#x27;</span><span class="comment">//代理地址</span></span><br></pre></td></tr></table></figure><p>如果不想使用VITE开头，也可以更改，<br>在vite.config.ts文件中添加 envPrefix:”HY”//HY为自定义开头名</p><p>2、在package.json中设置启动和打包命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --mode serve-dev&quot;</span><span class="punctuation">,</span><span class="comment">//运行取.env.serve-dev里面的配置</span></span><br><span class="line">    <span class="attr">&quot;build:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode  build-test&quot;</span><span class="punctuation">,</span><span class="comment">//打包取.env.build-test文件里面的配置</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build --mode build&quot;</span><span class="punctuation">,</span><span class="comment">//打包取.env.build文件里面的配置</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>说明：<br>.env.[mode]的优先级比.env文件的优先级高</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、是什么&quot;&gt;&lt;a href=&quot;#1、是什么&quot; class=&quot;headerlink&quot; title=&quot;1、是什么&quot;&gt;&lt;/a&gt;1、是什么&lt;/h4&gt;&lt;p&gt;Vite的import.meta.env可以全局使用，其中默认具有一些属性(MODE,DEV,PROD,SSR,BA</summary>
      
    
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/Vue/"/>
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Vue" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>25年元宵节一些小小的思考</title>
    <link href="https://github.com/hy5555/hy5555.github.io.git/2025/02/12/25%E5%B9%B4%E8%A7%84%E5%88%92/"/>
    <id>https://github.com/hy5555/hy5555.github.io.git/2025/02/12/25%E5%B9%B4%E8%A7%84%E5%88%92/</id>
    <published>2025-02-12T13:39:20.894Z</published>
    <updated>2025-02-12T14:08:01.206Z</updated>
    
    <content type="html"><![CDATA[<hr><p>今天是2025年的元宵节，这周工作很多，让我感觉压力有点大，工作的事情工作时再说，这两天我有种不想在公司继续干了的想法，毕业进公司已经七个多月了，工作上琐碎的事情让我心烦意乱，总觉得自己身处围城其中，经常想要逃离这个地方，但是听朋友们的话语和网上的言论，感觉围城之外还是围城，但是心里还是觉得，自己需要一定的能力，当想走出围城的时候，就能够走出围城。</p><p>盘一下自己目前的技术栈，Vue3，element plus组件库，前端三件套。</p><p>想要跳出去，需要学习uniapp，做至少两个项目，一个壁纸项目已经选好了，另外一个待确定，express框架也需要重新温习一下了，再还有就是微前端，这是一个点，四月前学习uniapp，每天抽出一个小时，或者定下看三集网课，五月学习express，六月学习微前端，平时需要润色简历和记录问题以及解决办法。</p><p>工作之中，尽量提高工作效率，不懂的就去问，脸皮厚一点，把其他人想的好一点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;今天是2025年的元宵节，这周工作很多，让我感觉压力有点大，工作的事情工作时再说，这两天我有种不想在公司继续干了的想法，毕业进公司已经七个多月了，工作上琐碎的事情让我心烦意乱，总觉得自己身处围城其中，经常想要逃离这个地方，但是听朋友们的话语和网上的言论，感觉围城之</summary>
      
    
    
    
    <category term="乱讲" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E4%B9%B1%E8%AE%B2/"/>
    
    
    <category term="乱讲" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E4%B9%B1%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>Vue3组件通信方式</title>
    <link href="https://github.com/hy5555/hy5555.github.io.git/2023/07/30/Vue3%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>https://github.com/hy5555/hy5555.github.io.git/2023/07/30/Vue3%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</id>
    <published>2023-07-30T05:35:56.000Z</published>
    <updated>2023-11-01T09:06:13.013Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、props"><a href="#1、props" class="headerlink" title="1、props"></a>1、props</h4><p>Vue2和Vue3均有，用于父组件给子组件传值，在子组件中不能对该值进行修改，会有警告。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">//父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">::info</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;路径&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> info = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Yellow one&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">//子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">info</span>&#125;&#125;</span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;info&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2、自定义事件"><a href="#2、自定义事件" class="headerlink" title="2、自定义事件"></a>2、自定义事件</h4><p>用于子组件给父组件传值</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">//父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> @<span class="hljs-attr">xxx</span> = <span class="hljs-string">&quot;getXXX&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;路径&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;ref&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getXXX</span> = (<span class="hljs-params">a,b</span>)=&gt;</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        console.log(a)</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">//子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span> = <span class="hljs-string">$emit(</span>&#x27;<span class="hljs-attr">getXXX</span>&#x27;,<span class="hljs-attr">a</span>,<span class="hljs-attr">b</span>)&gt;</span>我是按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> $emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;getXXX&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>值得注意的是，在Vue2中，我们在自定义组件标签里面写click等原生事件时，需要在后面加修饰符native，因为在默认情况下，父组件无法监听子组件的原生DOM事件，而native修饰符允许你在自定义组件中绑定原生事件。在Vue3中，不需要使用此修饰符，父组件会直接当成原生事件，但是如果你在子组件中引入了click自定义事件，这时父组件不会将click当成原生事件，而是自定义事件。在编码的过程中，我们命名一般避免使用原生事件的名字，以免造成不必要的误解。</p><h4 id="3、provide和inject"><a href="#3、provide和inject" class="headerlink" title="3、provide和inject"></a>3、provide和inject</h4><p>在Vue3中，取消了全局事件总线的使用，跨组件通信使用provide和inject</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">import</span> &#123; provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> sharedData = <span class="hljs-string">&#x27;Hello, World!&#x27;</span>;<br>  <br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;myData&#x27;</span>, sharedData); <span class="hljs-comment">// 提供名为&#x27;myData&#x27;的数据</span><br>  <br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 子组件A</span><br><span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> myData = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;myData&#x27;</span>); <span class="hljs-comment">// 接收名为&#x27;myData&#x27;的数据</span><br>  <br>    <span class="hljs-comment">// 使用myData</span><br>  <br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 子组件B</span><br><span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> myData = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;myData&#x27;</span>); <span class="hljs-comment">// 接收名为&#x27;myData&#x27;的数据</span><br>  <br>    <span class="hljs-comment">// 使用myData</span><br>  <br>    <span class="hljs-keyword">return</span> &#123;&#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、v-model"><a href="#4、v-model" class="headerlink" title="4、v-model"></a>4、v-model</h4><p>这个是一个语法糖，用于场景在数据在父组件，但是改变数据的按钮在子组件，父组件在自定义子组件标签里面使用v-model,比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">&lt;Son :<span class="hljs-built_in">num</span>=<span class="hljs-string">&quot;num&quot;</span> <span class="hljs-meta">@update</span>:<span class="hljs-built_in">num</span> = <span class="hljs-string">&quot;updateNum&quot;</span>&gt;&lt;/Son&gt;<br></code></pre></td></tr></table></figure><h4 id="5、useAttrs方法"><a href="#5、useAttrs方法" class="headerlink" title="5、useAttrs方法"></a>5、useAttrs方法</h4><p>在Vue3中，可以使用useAttrs方法进行父子组件通信（父传子），这个方法常用于进行组件的二次封装。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">attrs.text</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useAttrs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> attrs = <span class="hljs-title function_">useAttrs</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      attrs.<span class="hljs-title function_">onClick</span>(); <span class="hljs-comment">// 调用父组件传递的onClick方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      attrs,</span></span><br><span class="language-javascript"><span class="language-xml">      handleClick</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">child-component</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;Click me&quot;</span> <span class="hljs-attr">:onClick</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child-component</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChildComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ChildComponent.vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">ChildComponent</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 处理点击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="6、ref"><a href="#6、ref" class="headerlink" title="6、ref"></a>6、ref</h4><p>ref也可以作为组件间的一种通信方式</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">//父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;ref&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> 路径</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> son = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">//子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;ref&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> a = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Yellow one&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">defineExport</span>(</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        a</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="7、-parent"><a href="#7、-parent" class="headerlink" title="7、$parent"></a>7、$parent</h4><pre><code class="hljs">$parent可以获取到父节点</code></pre><h4 id="8、pinia"><a href="#8、pinia" class="headerlink" title="8、pinia"></a>8、pinia</h4><p>在 Vue 3 中，可以使用 Pinia 来实现状态管理。Pinia 是一个基于 Vue 3 的新一代状态管理库，它提供了一种简单、直观且易于使用的方式来管理应用程序的状态。</p><p>下面是使用 Pinia 的简要步骤：</p><p>安装 Pinia：<br><code>npm install pinia</code><br>创建一个 Pinia 实例并定义状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-comment">// 注册一个 store</span><br><span class="hljs-keyword">const</span> store = pinia.<span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;counter&#x27;</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++;<br>    &#125;,<br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>--;<br>    &#125;<br>  &#125;<br>&#125;);<br><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pinia;<br></code></pre></td></tr></table></figure><p>在应用程序的入口处挂载 Pinia：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> pinia <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pinia&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(pinia);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在组件中使用 Pinia 状态：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$store.counter.count</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.counter.increment()&quot;</span>&gt;</span>Increment<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.counter.decrement()&quot;</span>&gt;</span>Decrement<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CounterComponent&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个名为 counter 的 store，它具有一个名为 count 的状态和两个操作函数 increment 和 decrement。然后，在组件中使用 $store 来访问和调用 store 中的状态和操作。</p><p>Pinia 提供了一种非常直观和简单的方式来管理应用程序的状态，同时也遵循 Vue 3 的响应式原理。它可以与其他 Vue 生态系统库（如 Vue Router、Vuex）以及 TypeScript 紧密集成，提供更好的开发体验。</p><h4 id="9、插槽"><a href="#9、插槽" class="headerlink" title="9、插槽"></a>9、插槽</h4><p>分为默认插槽，具名插槽和作用域插槽，作用域插槽可以用来传递数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、props&quot;&gt;&lt;a href=&quot;#1、props&quot; class=&quot;headerlink&quot; title=&quot;1、props&quot;&gt;&lt;/a&gt;1、props&lt;/h4&gt;&lt;p&gt;Vue2和Vue3均有，用于父组件给子组件传值，在子组件中不能对该值进行修改，会有警告。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://github.com/hy5555/hy5555.github.io.git/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://github.com/hy5555/hy5555.github.io.git/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
